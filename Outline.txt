Customer - makes orders cancels orders, signs up for our service
	Customer id
	Customer name
	Customer Shipping Address


Doctors - send in prescriptions

	Doctor id
	Doctor Name
	Doctor Zip code 

Patient_Of
	Patient_Of_ID
	Doctor_ID
	Customer_ID



customer_Orders - checks prescription (with frontend to verify prescription amount) 
	Cust_Order_ID
	Customer_ID
	Prescription_ID
	Employee_ID // who shipped the order
	Meds_ID
	Date_Ordered


Meds- how many of what we have - seen by admins, customers	
	Meds_ID
	Meds_Name  - example Aspirin 25mg
	Stock_Amount
		

Prescriptions 
	Prescription ID
	Doctor id who prescribed
	Customer id prescribed to
	Meds_ID
	Refill amounts
	Date prescribed
	Optional - pill identifier picture 
	

Restock_Orders-
	Restock_Order_Id
	Employee_ID
	Meds_ID
	Order_Date
	

- Employee
	Employee_ID
	Employee_Name
	Employee_Title


	







Need 3 indexes  indexing by customer id provides the best user experience for our customers


Index prescriptions on customer_Id 
Index Customer_Orders on customer_ID
index patient_of on doctor_Id (they will be the ones using that table)
Index meds on Stock amount -
	Admins will be checking this to see if they need to restock



If we need more tables:

Patient_Of
	Doctor_Id
	Customer_ID

Employee
	Employee_ID
	Employee_Name
	Employee_TItle




Order history OPTIONAL

	Previous_Orders
		Previous_Orders_ID
		customer_Id
		order_Id
		med_Id
		Date_Ordered

SUPPLIER AND INVENTORY UPDATES ARE OPTIONAL

In Meds
	Add 	Supplier_ID 


Suppliers - provide meds - only seen by admins - each supplier makes only one drug
	Supplier ID
	Supplier Name


inventoryOrders - admin orders more meds from supplier
	Inventory_Order_ID
	Meds_ID
	Supplier_ID
	Date_Ordered
	
	
	
6 SQL queries needed IDEAS:

admins might need to see perscriptons that are more than a year old
admins need to see when they are out of a med
users need to see their percriptions, how many refills
users need to see inventory
Doctors need to see patients
Doctors need to see all written perscriptions


PAPER REQUIREMENTS:

description,
 ERD,
 relational Model 
 discussion on index selection  discussion of FDs and how it is normalized
sql for creation and population of the tables.
Discuss how you anticipate the application to be used and how this drove your design
Screenshots showing the interface(all of them)
Discuss how you implement constraints
Discuss how you ensure integrity
Discuss updates that will require transactions be built
Discuss error checking - non sensical data entered on form
Provide from each team member the ranking form found here ,signed by each team member

change
